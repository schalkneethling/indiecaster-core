---
import CardPerson from "./CardPerson.astro";
import { indieCasterConfig } from "../../indiecaster.config.js";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

interface Props {
  episode?: CollectionEntry<"episodes">;
}

const { episode } = Astro.props;
const { colorPrimaryColor } = indieCasterConfig;

// Get all hosts data
const hostsData = (await getCollection("hosts" as any)) as any[];
const hostsMap = new Map(hostsData.map((host) => [host.slug, host]));

// Host information - handle multiple hosts
const hosts = [];

if (episode?.data.hosts && episode.data.hosts.length > 0) {
  // Add all hosts
  episode.data.hosts.forEach((hostSlug) => {
    const hostData = hostsMap.get(hostSlug);
    if (hostData) {
      hosts.push({
        name: hostData.data.name,
        pictureSrc: `profile-images/${hostData.data.profilePicture}`,
        type: "Host",
      });
    }
  });
} else {
  // Fallback to config for backward compatibility
  const { hostName, hostProfilePicture } = indieCasterConfig;
  hosts.push({
    name: hostName,
    pictureSrc: `profile-images/${hostProfilePicture}`,
    type: "Host",
  });
}

// Get guest information from episode (featured episode is handled at page level)
let guestName = "Guest";
let guestProfilePicture = "guest-default";

// Check if episode has guests
if (episode?.data.guests && episode.data.guests.length > 0) {
  if ((episode as any)?.featuredGuestProfilePicture) {
    // This is a featured episode - use the custom profile picture property
    guestName = episode.data.guests[0];
    guestProfilePicture = (episode as any).featuredGuestProfilePicture;
  } else {
    // This is a regular episode - use the first guest
    guestName = episode.data.guests[0];
    guestProfilePicture = episode.data.guests[0]
      .toLowerCase()
      .replace(/\s+/g, "-");
  }
}

const featuredGuest = {
  name: guestName,
  pictureSrc: `profile-images/${guestProfilePicture}`,
  type: "Guest",
};
---

<div class="base-container-padding">
  <ul class="reset-list featured-episode-profiles">
    {
      // Show all hosts
      hosts.map((host) => (
        <li class="featured-episode-profile">
          <CardPerson person={host}>
            <h2 class="card-person-name" slot="card-person-name">
              {host.name}
            </h2>
          </CardPerson>
        </li>
      ))
    }
    {
      // Only show guest if episode has guests
      episode?.data.guests && episode.data.guests.length > 0 && (
        <li class="featured-episode-profile">
          <CardPerson person={featuredGuest}>
            <h2 class="card-person-name" slot="card-person-name">
              {featuredGuest.name}
            </h2>
          </CardPerson>
        </li>
      )
    }
  </ul>
</div>

<style define:vars={{ colorPrimaryColor }}>
  .featured-episode-profiles {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-medium);
    padding: 0;
  }

  @media only screen and (min-width: 47.9375rem) {
    .featured-episode-profiles {
      flex-wrap: nowrap;
      gap: 0;
      margin: 0 auto;
      max-width: 37.5rem;
    }
  }

  .featured-episode-profile {
    flex: 1 1 100%;
  }

  .featured-episode-profile img {
    border: 0.4rem solid var(--colorPrimaryColor);
    border-radius: var(--border-radius-circle);
    height: 5rem;
    margin-top: var(--spacing-narrow);
    width: 5rem;
  }

  .featured-episode-profile-heading {
    font-size: var(--typography-size-medium);
  }
</style>
