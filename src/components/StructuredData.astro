---
import { indieCasterConfig } from "../../indiecaster.config.js";

interface Props {
    type: "podcast" | "episode";
    data: {
        // Podcast data
        name?: string;
        description?: string;
        url?: string;
        image?: string;
        author?: string;
        // Episode data
        title?: string;
        episodeNumber?: number;
        season?: number;
        duration?: string;
        pubDate?: Date;
        audioUrl?: string;
        guests?: string[];
        tags?: string[];
    };
}

const { type, data } = Astro.props;
const { domain } = indieCasterConfig;

// Generate structured data based on type
let structuredData: any = {};

if (type === "podcast") {
    structuredData = {
        "@context": "https://schema.org",
        "@type": "Podcast",
        name: data.name || "IndieCaster",
        description:
            data.description ||
            "[YOUR_PODCAST_NAME] - [BRIEF_DESCRIPTION_OF_YOUR_PODCAST]",
        url: data.url || `https://${domain}`,
        image:
            data.image || `https://${domain}/episode-artwork/default.png`,
        author: {
            "@type": "Person",
            name: data.author || "[YOUR_NAME]",
        },
        publisher: {
            "@type": "Organization",
            name: "IndieCaster",
        },
        inLanguage: "en-US",
        genre: "Technology",
        category: "Technology",
    };
} else if (type === "episode") {
    structuredData = {
        "@context": "https://schema.org",
        "@type": "PodcastEpisode",
        name: data.title,
        description: data.description,
        episodeNumber: data.episodeNumber,
        seasonNumber: data.season,
        duration: data.duration,
        datePublished: data.pubDate?.toISOString(),
        audio: {
            "@type": "AudioObject",
            url: data.audioUrl,
            encodingFormat: "audio/mpeg",
        },
        partOfSeries: {
            "@type": "PodcastSeries",
            name: "IndieCaster",
            url: `https://${domain}`,
        },
        author:
            data.guests?.map((guest) => ({
                "@type": "Person",
                name: guest,
            })) || [],
        keywords: data.tags?.join(", ") || "",
    };
}
---

<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

