---
import CardPerson from "./CardPerson.astro";
import { indieCasterConfig } from "../../indiecaster.config.js";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

interface Props {
  episode?: CollectionEntry<"episodes">;
}

const { episode } = Astro.props;
const { colorPrimaryColor } = indieCasterConfig;

// Get all hosts data
const hostsData = (await getCollection("hosts" as any)) as any[];
const hostsMap = new Map(hostsData.map((host) => [host.slug, host]));

// Host information - handle multiple hosts
const hosts = [];

if (episode?.data.hosts && episode.data.hosts.length > 0) {
  // Add all hosts
  episode.data.hosts.forEach((hostSlug) => {
    const hostData = hostsMap.get(hostSlug);
    if (hostData) {
      hosts.push({
        name: hostData.data.name,
        pictureSrc: `/profile-images/${hostData.data.profilePicture}`,
        type: "host",
      });
    }
  });
} else {
  // Fallback to config for backward compatibility
  const { hostName, hostProfilePicture } = indieCasterConfig;
  hosts.push({
    name: hostName,
    pictureSrc: `/profile-images/${hostProfilePicture}`,
    type: "host",
  });
}

// Guest information - handle multiple guests or no guests
const guests = [];

if (episode?.data.guests && episode.data.guests.length > 0) {
  // Add all guests
  episode.data.guests.forEach((guestName) => {
    let guestProfilePicture = guestName.toLowerCase().replace(/\s+/g, "-");

    // Handle featured episode custom profile picture
    if ((episode as any)?.featuredGuestProfilePicture && guests.length === 0) {
      guestProfilePicture = (episode as any).featuredGuestProfilePicture;
    }

    guests.push({
      name: guestName,
      pictureSrc: `/profile-images/${guestProfilePicture}`,
      type: "guest",
    });
  });
}
---

<ul class="reset-list featured-episode-profiles">
  {
    // Show all hosts
    hosts.map((host) => (
      <li class="featured-episode-profile">
        <CardPerson person={host}>
          <h2 class="card-person-name" slot="card-person-name">
            {host.name}
          </h2>
        </CardPerson>
      </li>
    ))
  }
  {
    // Show all guests if episode has guests
    guests.map((guest) => (
      <li class="featured-episode-profile">
        <CardPerson person={guest}>
          <h2 class="card-person-name" slot="card-person-name">
            {guest.name}
          </h2>
        </CardPerson>
      </li>
    ))
  }
</ul>

<style define:vars={{ colorPrimaryColor }}>
  .featured-episode-profiles {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-medium);
    margin: var(--spacing-medium) 0;
    padding: 0;
  }

  @media only screen and (min-width: 47.9375rem) {
    .featured-episode-profiles {
      flex-wrap: nowrap;
      gap: 0;
      max-width: 37.5rem;
    }
  }

  .featured-episode-profile {
    flex: 1 1 100%;
  }

  .featured-episode-profile img {
    border: 0.4rem solid var(--colorPrimaryColor);
    border-radius: var(--border-radius-circle);
    height: 5rem;
    margin-top: var(--spacing-narrow);
    width: 5rem;
  }

  .featured-episode-profile-heading {
    font-size: var(--typography-size-medium);
  }
</style>
